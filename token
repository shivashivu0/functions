// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

contract Token is ERC20, ERC20Burnable, Ownable {
    constructor(
        string memory _title,
        string memory _code,
        uint256 starting_balance,
        address starting_owner
    ) ERC20(_title, _code) Ownable(starting_owner) {
        _mint(msg.sender, starting_balance);
    }

    function mintTokens(address to_address, uint256 length) external onlyOwner {
        _mint(to_address, length);
    }

    function burnTokens(uint256 length) external {
        _burn(msg.sender, length);
    }

    function transferTokens(address to_address, uint256 length) public virtual returns (bool) {
        _transfer(_msgSender(), to_address, length);
        return true;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    function getBalance(address account) public view returns (uint256) {
        return balanceOf(account);
    }
}
